var searchIndex = {};
searchIndex["recs"] = {"doc":"Simple entity-component system. Macro-free stable Rust using compile-time reflection!","items":[[3,"EntityId","recs","Value type representing an entity in the entity-component system.",null,null],[3,"ComponentFilter","","List of component types.",null,null],[3,"Ecs","","Primary data structure containing entity and component data.",null,null],[4,"NotFound","","Error type for ECS results that require a specific entity or component.",null,null],[13,"Entity","","A requested entity ID was not present in the system.",0,null],[13,"Component","","A requested component was not present on an entity.",0,null],[6,"EcsResult","","Result type for ECS operations that may fail without a specific entity or component.",null,null],[8,"Component","","Marker trait for types which can be used as components.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"entityid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"entityid"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"entityid"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"entityid"}],"output":{"name":"entityid"}}],[11,"eq","","",0,{"inputs":[{"name":"notfound"},{"name":"notfound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"notfound"},{"name":"notfound"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"notfound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"componentfilter"}],"output":{"name":"componentfilter"}}],[11,"fmt","","",2,{"inputs":[{"name":"componentfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"componentfilter"},{"name":"componentfilter"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"componentfilter"},{"name":"componentfilter"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"componentfilter"}}],[11,"new","","Create a new component filter.",2,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Add component type `C` to the filter.",2,{"inputs":[{"name":"componentfilter"}],"output":null}],[11,"remove","","Remove component type `C` from the filter.",2,{"inputs":[{"name":"componentfilter"}],"output":null}],[11,"contains","","Return `true` if the filter already contains component type `C`; otherwise `false`.",2,{"inputs":[{"name":"componentfilter"}],"output":{"name":"bool"}}],[11,"from_slice","","Create a component filter from a vector/slice of `TypeId` instances. (Not recommended;\nused by the `component_filter!` macro.)",2,null],[11,"iter","","Return an iterator over all the contained component types.",2,{"inputs":[{"name":"componentfilter"}],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"ecs"}}],[11,"new","","Create a new and empty entity-component system (ECS).",3,{"inputs":[],"output":{"name":"self"}}],[11,"create_entity","","Create a new entity in the ECS without components and return its ID.",3,{"inputs":[{"name":"ecs"}],"output":{"name":"entityid"}}],[11,"exists","","Return `true` if the provided entity exists in the system.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"destroy_entity","","Destroy the provided entity, automatically removing any of its components.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"ecsresult"}}],[11,"set","","For the specified entity, add a component of type `C` to the system.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"},{"name":"c"}],"output":{"name":"ecsresult"}}],[11,"get","","Return a clone of the requested entity&#39;s component of type `C`, or a `NotFound` variant\nif the entity does not exist or does not have that component.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"ecsresult"}}],[11,"has","","Return `true` if the specified entity has a component of type `C` in the system, or\n`NotFound::Entity` if the entity does not exist.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"ecsresult"}}],[11,"has_all","","Return `true` if each component type in the filter is present on the entity `id`.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"},{"name":"componentfilter"}],"output":{"name":"ecsresult"}}],[11,"borrow","","Return a shared reference to the requested entity&#39;s component of type `C`, or a\n`NotFound` variant if the entity does not exist or does not have that component.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"ecsresult"}}],[11,"borrow_mut","","Return a mutable reference to the requested entity&#39;s component of type `C`, or a\n`NotFound` variant if the entity does not exist or does not have that component.",3,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"ecsresult"}}],[11,"iter","","Return an iterator over every ID in the system.",3,{"inputs":[{"name":"ecs"}],"output":{"name":"box"}}],[11,"collect","","Collect all entity IDs into a vector (after emptying the vector).",3,{"inputs":[{"name":"ecs"},{"name":"vec"}],"output":null}],[11,"collect_with","","Collect the IDs of all entities containing a certain set of component types into a vector.",3,{"inputs":[{"name":"ecs"},{"name":"componentfilter"},{"name":"vec"}],"output":null}],[14,"component_filter!","","Create a `ComponentFilter` by type name.",null,null]],"paths":[[4,"NotFound"],[3,"EntityId"],[3,"ComponentFilter"],[3,"Ecs"]]};
searchIndex['recs'] = {"items":[[0,"","recs","Simple entity-component system. Pure Rust (macro-free)!",null,null],[3,"Ecs","","Primary data structure containing entity and component data.",null,null],[3,"EntityIdIter","","Iterator for entity IDs.",null,null],[3,"EntityComponentFilter","","Iterator for entity IDs filtered by component.",null,null],[3,"ComponentIter","","Iterator that yields references to ECS components.",null,null],[3,"ComponentIterMut","","Iterator that yields mutable references to ECS components.",null,null],[6,"EntityId","","Value type representing an entry in the entity-component system.",null,null],[8,"Component","","Marker trait for types which can be used as components.",null,null],[6,"Item","","",null,null],[11,"next","","",0,{"inputs":[{"name":"entityiditer"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",1,{"inputs":[{"name":"entitycomponentfilter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"componentiter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"componentitermut"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[{"name":"ecs"}],"output":{"name":"self"}}],[11,"new","","Create a new and empty entity-component system (ECS).",4,{"inputs":[{"name":"ecs"}],"output":{"name":"self"}}],[11,"create_entity","","Create a new entity in the ECS with no components, and return its ID.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"entityid"}}],[11,"has_entity","","Return `true` if the provided entity exists in this system.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"destroy_entity","","Destroy the provided entity, automatically removing any of its\ncomponents.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"set","","For the specified entity, add a component of type `C` to the system.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"},{"name":"c"}],"output":{"name":"option"}}],[11,"get","","Return a clone of the requested entity's component of type `C`, or\n`None` if the entity does not have that component.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"option"}}],[11,"has","","Return `true` if the specified entity has a component of type `C\nin the system.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"bool"}}],[11,"borrow","","Return a reference to the requested entity's component of type `C`, or\n`None` if the entity does not have that component.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"option"}}],[11,"borrow_mut","","Return a mutable reference to the requested entity's component of type\n`C`, or `None` if the entity does not have that component.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"option"}}],[11,"iter_ids","","Return an iterator over every ID in the system.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"entityiditer"}}],[11,"collect_ids","","Return a vector containing copies of every ID in the system.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"vec"}}],[11,"iter_with","","For every entity with a component of type `C`, yield a tuple containing\nthe entity's ID as well as a reference to its `C` component.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"entitycomponentfilter"}}],[11,"collect_with","","Return a vector containing the results of `iter_with`, but with cloned\ncomponents (rather than references).",4,{"inputs":[{"name":"ecs"}],"output":{"name":"vec"}}],[11,"collect_with_2","","Collect all entities with `C1` and `C2` components.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"vec"}}],[11,"collect_with_3","","Collect all entities with `C1`, `C2`, and `C3` components.",4,{"inputs":[{"name":"ecs"}],"output":{"name":"vec"}}],[11,"iter_components","","Return an iterator yielding references to all components of the\nrequested entity.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"componentiter"}}],[11,"iter_components_mut","","Return an iterator yielding mutable references to all components of the\nrequested entity.",4,{"inputs":[{"name":"ecs"},{"name":"entityid"}],"output":{"name":"componentitermut"}}]],"paths":[[3,"EntityIdIter"],[3,"EntityComponentFilter"],[3,"ComponentIter"],[3,"ComponentIterMut"],[3,"Ecs"]]};
initSearch(searchIndex);
